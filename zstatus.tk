#!/usr/bin/env wish9.0
package require cmdline
package require unix_sockets
package require utils
package require devices
package require maildir
package require metar
package require musicpd
package require SysInfo
package require zconfig

namespace eval zstatus {
	variable currenttheme	none

	# Unicode codes from remixicon
	array set icons [ list	down	\uea4a \
				up	\uea74 \
				mixer	\uf229 ]

	array set modes [ list  Monocle	M \
				VTiled	V \
				HTiled	H \
				Stacked	S ]

	# Array of messages that can be accepted
	array set messagearray [ list \
	    window_active [ list widget wintitle action set_wintitle arg 1]\
	    no_window_active [ list widget wintitle action unset_wintitle arg 1]\
	    desktop_list [ list widget desklist action set_desklist arg 1]\
	    desktop_mode [ list widget deskmode action set_deskmode arg 1]\
	    desktop_name [ list widget deskname action set_deskname arg 1]\
	    mixer_volume [ list widget mixer action set_mixer arg 0]\
	    metar_window [ list widget metar action metar::toggle_window arg 0]\
	    metar_update [ list widget metar action metar::update arg 0]\
	    musicpd_update [ list widget musicpd action musicpd::update arg 0]\
	    set_theme [ list widget none action set_theme arg 1]]
}

# Set the theme on the alements of the bar
proc zstatus::set_theme {theme} {
	variable currenttheme
	if {$theme == $currenttheme} { return }
	set currenttheme $theme

	variable bar
	variable widgetlist
	array set statusbar $::widgetarray(statusbar)

	set count 0
	$bar configure -background $statusbar($currenttheme)
	foreach item $widgetlist {
		array set widget $::widgetarray($item)
		if {$widget(type) == "transient"} {
			${item}::set_theme $currenttheme
		} elseif {$widget(type) == "separator"} {
			incr count
			$bar.$item$count configure\
				-background $widget($currenttheme)
		} elseif {$widget(type) != "bar"} {
			$bar.$item configure -bg $statusbar($currenttheme)\
					-fg $widget($currenttheme)
		}
	}

	if [winfo exists $bar.metar] {
		metar::set_theme $currenttheme
	}
}

proc zstatus::set_wintitle {value} {
	array set widget $::widgetarray(wintitle)
	set length [tcl::mathfunc::min [string length $value] $widget(maxlength)]
	variable wintitle
	$wintitle configure -state normal
	$wintitle delete 1.0 end
	$wintitle configure -width $length
	$wintitle insert 1.0 $value
	foreach i [$wintitle search -all \
		-regexp {[\u2000-\u28ff\U1f000-\U1faff]} 1.0 end] {
		$wintitle tag add emoji $i
	}
	$wintitle configure -state disabled
}

proc zstatus::unset_wintitle {value} {
	variable wintitle
	$wintitle configure -state normal
	$wintitle delete 1.0 end
	$wintitle configure -state disabled
}

proc zstatus::set_desklist {value} {
	variable desklist
	set desklist $value
}

proc zstatus::set_deskmode {value} {
	variable modes
	variable deskmode
	if [info exists modes($value)] {
		set deskmode " $modes($value)"
	} else {
		set deskmode " $value"
	}
}

proc zstatus::set_deskname {value} {
	variable deskname
	set deskname $value
}

proc zstatus::set_deskname {value} {
	variable deskname
	set deskname $value
}

proc zstatus::set_loadavg {} {
	variable loadavg
	set loadavg "C: [sysinfo::getloadavg] "
}

proc zstatus::set_memused {} {
	variable memused
	set memstats [sysinfo::getmemstats]
	set memused "M: [join [lindex $memstats 0]] "
	set swap [join [lindex $memstats 1]]
	if {[string length $swap]} {
		set memused "$memused\($swap\) "
	}
}

proc zstatus::set_arcsize {} {
	variable arcsize
	set arcstats [sysinfo::getarcstats]
	set arcsize "ARC: [join [lindex $arcstats 0]] "
}

proc zstatus::set_netin {} {
	array set widget $::widgetarray(netin)
	set inval [sysinfo::getnetin $widget(interface)]
	variable netin
	variable icons
	set netin "$icons(down)[join [lindex $inval 0]] "
}

proc zstatus::set_netout {} {
	array set widget $::widgetarray(netout)
	set outval [sysinfo::getnetout $widget(interface)]
	variable netout
	variable icons
	set netout "$icons(up)[join [lindex $outval 0]] "
}

proc zstatus::set_datetime {} {
	array set widget $::widgetarray(datetime)
	variable datetime
	set datetime [clock format [clock seconds] \
		-locale $::config(lang) -format $widget(format)]
}

proc zstatus::set_mixer {} {
	variable mixer
	variable icons
	set mixer "$icons(mixer) [sysinfo::getmixervol]"
}

# Send a message to the window manager
proc zstatus::wm_message {msg} {
	set xscreen $::config(xscreen)
	set wmsocket $::config(zwmsocket)

	if [catch {set channel [unix_sockets::connect $wmsocket]}] {
		puts stderr "Could not open socket $wmsocket!\n"
		return
	}
	puts $channel "$xscreen;$msg"
	close $channel
}

proc zstatus::server_accept {channel} {
	chan configure $channel -buffering none -blocking 0
	chan event $channel readable [list zstatus::read_message $channel]
}

proc zstatus::read_message {channel} {
	if {[gets $channel line] < 0} {
		close $channel
		return
	}
	close $channel

	set line [string trimright $line]
	set equal [string first "=" $line]
	if {$equal == -1} {
		set key $line
		set value ""
	} elseif {$equal > 0} {
		set key [string range $line 0 $equal-1]
		set value [string range $line $equal+1 end]
	} else {
		return
	}

	variable messagearray
	if { ![info exists messagearray($key)] } { return }
	variable bar
	array set selected $messagearray($key)
	if {$selected(widget)=="none" || [winfo exists $bar.$selected(widget)]} {
		if {$selected(arg) == 1} {
			$selected(action) $value
		} else {
			$selected(action)
		}
	}
}

# No-op proc
proc zstatus::nop {} {}

# Periodic update
proc zstatus::update {} {
	variable widgetlist
	foreach item $widgetlist {
		array set widget $::widgetarray($item)
		$widget(periodic)
	}
}

proc zstatus::add_widgets {side} {
	variable bar
	variable widgetlist
	variable sepcount

	if {$side == "left"} {
		set widgets $::config(widgets_left)
	} else {
		set widgets $::config(widgets_right)
	}

	foreach item $widgets {
		if ![info exists ::widgetarray($item)] { continue }
		array set widget $::widgetarray($item)
		switch $widget(type) {
			label {
				pack [label $bar.$item -font $widget(font) \
					-text $widget(source)] -side $side
				set last $item
			}
			text {
				variable $widget(ref)
				set $widget(ref) [text $bar.$item \
					-font $widget(font) \
					-height 1 -borderwidth 0 \
					-highlightthickness 0 -wrap word]
				$bar.$item tag configure emoji -font emoji
				pack $bar.$item -side $side -expand 1
				$bar.$item configure -state disabled
				set last $item
			}
			var {
				pack [label $bar.$item -font $widget(font) \
					-textvar $widget(source)] -side $side
				set last $item
			}
			separator {
				incr sepcount
				pack [frame $bar.$item$sepcount -width 1] \
					-fill y -padx 5 -side $side
				set last $item$sepcount
			}
			transient {
				${item}::setup $bar $last $side
			}
		}
		lappend widgetlist $item
	}
}

# Setup the statusbar
proc zstatus::setup {} {
	variable bar
	variable widgetlist
	variable sepcount

	set bar [frame .zstatus]
	pack $bar -fill both -expand 1
	set last $bar

	set sepcount 0
	set widgetlist {}
	add_widgets left
	add_widgets right

	if [winfo exists $bar.deskmode] {
		bind $bar.deskmode <MouseWheel> {
			if {%D < 0} {
				zstatus::wm_message "desktop-mode-next"
			} else {
				zstatus::wm_message "desktop-mode-prev"
			}
		}
	}
	if [winfo exists $bar.desklist] {
		bind $bar.desklist <MouseWheel> {
			if {%D < 0} {
				zstatus::wm_message "desktop-switch-next"
			} else {
				zstatus::wm_message "desktop-switch-prev"
			}
		}
	}
	if [winfo exists $bar.loadavg] {
		bind $bar.loadavg <1> { exec xterm +sb -class top -e top & }
	}
	if [winfo exists $bar.mixer] {
		bind $bar.mixer <MouseWheel> {
			if {%D < 0} {
				exec mixer vol=-0.05
			} else {
				exec mixer vol=+0.05
			}
			zstatus::set_mixer
		}
	}
	if [winfo exists $bar.metar] {
		metar::setup
		bind $bar.metar <1> { metar::toggle_window }
		bind $bar.metar <2> { metar::update }
	}

	utils::every $::config(delay) zstatus::update
}

# Treat command line options
set options {
	{config.arg "default" "user configuration file"}
        {theme.arg  ""  "default theme"}
}
set usage ": zstatus.tk -config <configfile> -theme <theme> \n"

try {
	array set params [::cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
	puts $msg
	exit 1
}

# Read configuration
array set config [zconfig::read $params(config)]
array set widgetarray $::config(widgets)

set theme ""
if [info exists config(theme)] {
	set theme $config(theme)
} elseif [info exists params(theme)] {
	set theme $params(theme)
}
if {$theme != "day" && $theme != "dark"} {
	set theme day
}

# Setup tk app
tk appname "@PACKAGE_NAME@"
wm title . "@PACKAGE_NAME@ @PACKAGE_VERSION@"
wm geometry . $config(geometry)
wm attributes . -topmost 1 -type dock

font create normal -family $config(fontname)\
		 -size $config(fontsize)
font create italic -family $config(fontname)\
		-size $config(fontsize) -slant italic
font create bold -family $config(fontname)\
		-size $config(fontsize) -weight bold
font create emoji -family $config(emojifontname)\
		 -size $config(emojifontsize)
zstatus::setup
zstatus::set_theme $theme
set listen [unix_sockets::listen $config(socket) zstatus::server_accept]
vwait forever
