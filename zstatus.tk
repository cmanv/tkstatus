#!/usr/bin/env wish9.0
package require unix_sockets
package require utils
package require devices
package require maildir
package require metar
package require musicpd
package require SysInfo

namespace eval zstatus {
	variable xscreen 0
	variable barsocket	"$::env(BAR_SOCKET)"
	variable wmsocket	"$::env(XDG_CACHE_HOME)/zwm/socket"
	variable themefile	"$::env(XDG_STATE_HOME)/theme/current"
	variable currenttheme	none

	# Unicode codes from remixicon
	array set icons [ list	down	\uea4a \
				up	\uea74 \
				mixer	\uf229 ]

	array set modes [ list  Monocle	M \
				VTiled	V \
				HTiled	H \
				Stacked	S ]

	# Array of messages that can be accepted
	array set messagearray [ list \
	    window_active [ list widget wintitle action set_wintitle ]\
	    no_window_active [ list widget wintitle action clear_wintitle ]\
	    desktop_list [ list widget desklist action set_desklist ]\
	    desktop_mode [ list widget deskmode action set_deskmode ]\
	    desktop_name [ list widget deskname action set_deskname ]\
	    mixer_volume [ list widget mixer action set_mixer ]\
	    metar_window [ list widget metar action metar::toggle_window ]\
	    metar_update [ list widget metar action metar::update ]\
	    musicpd_update [ list widget musicpd action musicpd::update ]\
	    set_theme [ list widget none action set_theme ]]

	# Ordered list of widgets in the statusbar
	set widgetlist [ list deskmode desklist deskname\
			loadavg usedmem arcsize netin devices\
			wintitle datetime metar maildir mixer musicpd ]

	# Array describing the widgets in the statusbar
	array set widgetarray [ list \
	    deskmode [ list type var side left text zstatus::deskmode\
			font normal sep 1 periodic none]\
	    desklist [ list type var side left text zstatus::desklist\
			font normal sep 1 periodic none]\
	    deskname [ list type var side left text zstatus::deskname\
			font normal sep 1 periodic none]\
	    loadavg [ list type var side left text zstatus::loadavg\
			font normal sep 0 periodic set_loadavg]\
	    usedmem [ list type var side left text zstatus::usedmem\
			font normal sep 0 periodic set_usedmem]\
	    arcsize [ list type var side left text zstatus::arcsize\
			font normal sep 0 periodic set_arcsize]\
	    netout [ list type var side left text zstatus::netout\
			font normal sep 0 periodic set_netout]\
	    netin [ list type var side left text zstatus::netin\
			font normal sep 1 periodic set_netin]\
	    wintitle [ list type text ref wintitle side left\
			font normal sep 0 periodic none]\
	    datetime [ list type var side right text zstatus::datetime\
			font normal sep 1 periodic set_datetime]\
	    metar [ list type var side right text metar::report(statusbar)\
			font normal sep 1 periodic none]\
	    mixer [ list type var side right text zstatus::mixer\
			font normal sep 1 periodic set_mixer]\
	    devices [ list type dynamic side left sep 0 periodic devices::update]\
	    maildir [ list type dynamic side right sep 0 periodic maildir::update]\
	    musicpd [ list type dynamic side right sep 0 periodic musicpd::update] ]

	proc dark {} {
		set theme [ list \
			arcsize		CadetBlue3 \
			background	{#3b4252} \
			datetime	LightGray \
			desklist	LightGray \
			deskmode	CadetBlue3 \
			deskname	PaleGreen3 \
			loadavg		Gold \
			metar		Gold \
			mixer		PaleGreen3 \
			netin		LightGray \
			netout		CadetBlue3 \
			separator	Gray \
			usedmem		PaleGreen3 \
			wintitle	LightGray ]
	}

	proc light {} {
		set theme [ list \
			arcsize		black \
			background	gray90 \
			datetime	black \
			desklist	DarkBlue \
			deskmode	DarkBlue \
			deskname	black \
			loadavg		purple \
			metar		DarkGreen \
			mixer		black \
			netin		DarkGreen \
			netout		purple \
			separator	black \
			usedmem		DarkBlue \
			wintitle	black ]
	}

	# Set the theme on the alements of the bar
	proc set_theme {theme} {
		variable currenttheme
		if {$theme == $currenttheme} { return }

		switch $theme {
			light {
				set currenttheme light
				array set color [light]
			}
			dark {
				set currenttheme dark
				array set color [dark]
			}
			default {
				return
			}
		}

		variable bar
		variable widgetarray
		variable widgetlist
		$bar configure -background $color(background)
		foreach item $widgetlist {
			if ![info exists widgetarray($item)] { continue }
			array set widget $widgetarray($item)
			if {$widget(type) == "dynamic"} {
				${item}::set_theme $theme
			} else {
				$bar.$item configure -bg $color(background)\
						-fg $color($item)
				if {$widget(sep) == 1} {
					$bar.after_$item configure\
						-background $color(separator)
				}
			}
		}

		if [winfo exists $bar.metar] {
			metar::set_theme $theme
		}
	}

	proc set_wintitle {value} {
		variable wintitle
		set length [tcl::mathfunc::min [string length $value] 110]
		$wintitle configure -state normal
		$wintitle delete 1.0 end
		$wintitle configure -width $length
		$wintitle insert 1.0 $value
		foreach i [$wintitle search -all -regexp {[\u2000-\u28ff\U1f000-\U1faff]} 1.0 end] {
			$wintitle tag add emoji $i
		}
		$wintitle configure -state disabled
	}

	proc clear_wintitle {value} {
		variable wintitle
		$wintitle configure -state normal
		$wintitle delete 1.0 end
		$wintitle configure -state disabled
	}

	proc set_desklist {value} {
		variable desklist
		set desklist $value
	}

	proc set_deskmode {value} {
		variable modes
		variable deskmode
		if [info exists modes($value)] {
			set deskmode " $modes($value)"
		} else {
			set deskmode " $value"
		}
	}

	proc set_deskname {value} {
		variable deskname
		set deskname $value
	}

	proc set_deskname {value} {
		variable deskname
		set deskname $value
	}

	proc set_loadavg {} {
		variable loadavg
		set loadavg "C: [sysinfo::getloadavg] "
	}

	proc set_usedmem {} {
		variable usedmem
		set memstats [sysinfo::getmemstats]
		set usedmem "M: [join [lindex $memstats 0]] "
		set swap [join [lindex $memstats 1]]
		if {[string length $swap]} {
			set usedmem "$usedmem\($swap\) "
		}
	}

	proc set_arcsize {} {
		variable arcsize
		set arcstats [sysinfo::getarcstats]
		set arcsize "ARC: [join [lindex $arcstats 0]] "
	}

	proc set_netin {} {
		set netstats [sysinfo::getnetstats em0]
		variable icons
		variable netin
		set netin "$icons(down)[join [lindex $netstats 0]] "
	}

	proc set_netout {} {
		set netstats [sysinfo::getnetstats em0]
		variable icons
		variable netout
		set netout "$icons(up)[join [lindex $netstats 1]] "
	}

	proc set_datetime {} {
		variable datetime
		set datetime [clock format [clock seconds] \
			-locale $::env(LANG) -format {%d %b %H:%M }]
	}

	proc set_mixer {} {
		variable mixer
		variable icons
		set mixer "$icons(mixer) [sysinfo::getmixervol]"
	}

	# Send a message to the window manager
	proc wm_message {msg} {
		variable xscreen
		variable wmsocket

		if {[catch {set channel [unix_sockets::connect $wmsocket]} ]} {
			puts stderr "Could not open socket $wmsocket!\n"
			return
		}
		puts $channel "$xscreen;$msg"
		close $channel
	}

	proc server_accept {channel} {
		chan configure $channel -buffering none -blocking 0
		chan event $channel readable [list zstatus::read_message $channel]
	}

	proc read_message {channel} {
		if {[gets $channel line] < 0} {
			close $channel
			return
		}
		close $channel

		set line [string trimright $line]
		set equal [string first "=" $line]
		if {$equal == -1} {
			set key $line
			set value ""
		} elseif {$equal > 0} {
			set key [string range $line 0 $equal-1]
			set value [string range $line $equal+1 end]
		} else {
			return
		}

		variable messagearray
		if { ![info exists messagearray($key)] } { return }
		variable bar
		array set selected $messagearray($key)
		if {$selected(widget) == "none" || [winfo exists $bar.$selected(widget)]} {
			$selected(action) $value
		}
	}

	# Periodic update
	proc update {} {
		variable widgetlist
		variable widgetarray
		foreach item $widgetlist {
			if ![info exists widgetarray($item)] { continue }
			array set widget $widgetarray($item)
			if { $widget(periodic) != "none" } {
				$widget(periodic)
			}
		}
	}

	# Setup the static items in the statusbar
	proc setup {} {
		variable bar
		variable widgetarray
		variable widgetlist

		set bar [frame .zstatus]
		pack $bar -fill both -expand 1
		set last $bar
		foreach item $widgetlist {
			if ![info exists widgetarray($item)] { continue }
			array set widget $widgetarray($item)
			switch $widget(type) {
				label {
					pack [label $bar.$item -font $widget(font) \
						-text $widget(text)] -side $widget(side)
					set last $item
				}
				text {
					variable $widget(ref)
					set $widget(ref) [text $bar.$item \
						-font $widget(font) \
						-height 1 -borderwidth 0 \
						-highlightthickness 0 -wrap word]
					$bar.$item tag configure emoji -font emoji
					pack $bar.$item -side $widget(side) -expand 1
					$bar.$item configure -state disabled
					set last $item
				}
				var {
					pack [label $bar.$item -font $widget(font) \
						-textvar $widget(text)] \
						-side $widget(side)
					set last $item
				}
				dynamic {
					${item}::setup $bar $last $widget(side)
				}
			}
			if {$widget(sep) == 1} {
				pack [frame $bar.after_$item -width 1] \
					-fill y -padx 5 -side $widget(side)
				set last after_$item
			}
		}

		if [winfo exists $bar.deskmode] {
			bind $bar.deskmode <MouseWheel> {
				if {%D < 0} {
					zstatus::wm_message "desktop-mode-next"
				} else {
					zstatus::wm_message "desktop-mode-prev"
				}
			}
		}
		if [winfo exists $bar.desklist] {
			bind $bar.desklist <MouseWheel> {
				if {%D < 0} {
					zstatus::wm_message "desktop-switch-next"
				} else {
					zstatus::wm_message "desktop-switch-prev"
				}
			}
		}
		if [winfo exists $bar.loadavg] {
			bind $bar.loadavg <1> { exec xterm +sb -class top -e top & }
		}
		if [winfo exists $bar.mixer] {
			bind $bar.mixer <MouseWheel> {
				if {%D < 0} {
					exec mixer vol=-0.05
				} else {
					exec mixer vol=+0.05
				}
				zstatus::set_mixer
			}
		}
		if [winfo exists $bar.metar] {
			metar::setup
			bind $bar.metar <1> { metar::toggle_window }
			bind $bar.metar <2> { metar::update }
		}

		variable themefile
		if {[file exists $themefile]} {
			set_theme [string trim [utils::read_file $themefile]]
		} else {
			set_theme light
		}
		utils::every 2000 zstatus::update
	}
}

set lang fr
set timezone :America/Montreal

tk appname "zstatus"
font create normal -family NotoSans -size 11
font create italic -family NotoSans -size 11 -slant italic
font create bold -family NotoSans -size 11 -weight bold
font create emoji -family NotoColorEmoji -size 11

wm attributes . -topmost 1 -type dock
wm geometry . "[winfo vrootwidth .]x26+0+0"
wm title . "zstatus version 20250825"

zstatus::setup
set listen [unix_sockets::listen $zstatus::barsocket zstatus::server_accept]
vwait forever
