#!/usr/bin/env wish9.0
package require unix_sockets
package require utils
package require devices
package require maildir
package require metar
package require musicpd
package require SysInfo

namespace eval zstatus {
	variable xscreen 0
	variable barsocket	"$::env(BAR_SOCKET)"
	variable wmsocket	"$::env(XDG_CACHE_HOME)/zwm/socket"
	variable themefile 	"$::env(XDG_STATE_HOME)/theme/current"
	variable currenttheme light
	variable wintitle

	# Unicode codes from remixicon
	array set icons [ list	down	\uea4a \
				up	\uea74 \
				mixer	\uf229 ]

	array set modes [ list  Monocle	M \
				VTiled	V \
				HTiled	H \
				Stacked	S ]

	# Ordered list of widgets in the statusbar
	set barwidgets [ list deskmode desklist \
			deskname loadavg usedmem \
			arcsize netin title datetime \
			metar mixer ]

	# Array describing the widgets in the statusbar
	array set widgetarray [ list \
	    deskmode [ list type var side left text zstatus::deskmode \
			font normal separator 1]\
	    desklist [ list type var side left text zstatus::desklist \
			font normal separator 1]\
	    deskname [ list type var side left text zstatus::deskname \
			font normal separator 1]\
	    loadavg [ list type var side left text zstatus::loadavg font normal ]\
	    usedmem [ list type var side left text zstatus::usedmem font normal ]\
	    arcsize [ list type var side left text zstatus::arcsize font normal ]\
	    netin [ list type var side left text zstatus::netin font normal separator 1]\
	    title [ list type text side left height 1 font normal ]\
	    datetime [ list type var side right text zstatus::datetime \
			font normal separator 1]\
	    metar [ list type var side right text metar::report(statusbar) \
			font normal separator 1]\
	    mixer [ list type var side right text zstatus::mixer \
			font normal separator 1] ]

	proc dark {} {
		set theme [ list \
			arcsize		CadetBlue3 \
			background	{#3b4252} \
			datetime	LightGray \
			desklist	LightGray \
			deskmode	CadetBlue3 \
			deskname	PaleGreen3 \
			loadavg		Gold \
			metar		Gold \
			mixer		PaleGreen3 \
			netin		LightGray \
			netout		CadetBlue3 \
			separator	Gray \
			usedmem		PaleGreen3 \
			title		LightGray ]
	}

	proc light {} {
		set theme [ list \
			arcsize		black \
			background	gray90 \
			datetime	black \
			desklist	DarkBlue \
			deskmode	DarkBlue \
			deskname	black \
			loadavg		purple \
			metar		DarkGreen \
			mixer		black \
			netin		DarkGreen \
			netout		purple \
			separator	black \
			usedmem		DarkBlue \
			title		black ]
	}

	# Set the theme on the alements of the bar
	proc set_theme { theme } {
		variable currenttheme
		variable barwidgets
		variable widgetarray

		switch $theme {
			light {
				set currenttheme light
				array set color [light]
			}
			dark {
				set currenttheme dark
				array set color [dark]
			}
			default {
				return
			}
		}

		.bar configure -background $color(background)
		foreach item $barwidgets {
			array set widget $widgetarray($item)
			.bar.$item configure -bg $color(background) -fg $color($item)
			if [info exists widget(separator)] {
				.bar.after_$item configure -background $color(separator)
			}
		}

		devices::set_theme $theme
		maildir::set_theme $theme
		musicpd::set_theme $theme
	}

	# Update mixer after button event
	proc update_mixer {} {
		variable mixer
		variable icons
		set mixer "$icons(mixer) [sysinfo::getmixervol]"
	}

	# Send a message to the window manager
	proc wm_message { wmmessage } {
		variable xscreen
		variable wmsocket

		if {[catch {set channel [unix_sockets::connect $wmsocket]} ]} {
			puts stderr "Could not open socket $wmsocket!\n"
			return
		}
		puts $channel "$xscreen;$wmmessage"
		close $channel
	}

	proc read_message {channel} {
		variable currenttheme
		variable desklist
		variable deskname
		variable deskmode
		variable wintitle
		variable metar
		variable modes

		if {[gets $channel line] < 0} {
			close $channel
			return
		}
		close $channel

		set length 0
		set line [string trimright $line]
		set equal [string first "=" $line]
		if {$equal == -1} {
			set key $line
			set value ""
		} elseif {$equal > 0} {
			set key [string range $line 0 $equal-1]
			set value [string range $line $equal+1 end]
			set length [tcl::mathfunc::min [string length $value] 110]
		} else {
			return
		}
		if {$key == "window_active"} {
			$wintitle configure -state normal
			$wintitle delete 1.0 end
			$wintitle configure -width $length
			$wintitle insert 1.0 $value
			foreach i [$wintitle search -all -regexp {[\u2000-\u28ff\U1f000-\U1faff]} 1.0 end] {
				$wintitle tag add emoji $i
			}
			$wintitle configure -state disabled
		} elseif {$key == "no_window_active"} {
			$wintitle configure -state normal
			$wintitle delete 1.0 end
			$wintitle configure -state disabled
		} elseif {$key == "desktop_list"} {
			set desklist $value
		} elseif {$key == "desktop_mode"} {
			if [info exists modes($value)] {
				set deskmode " $modes($value)"
			} else {
				set deskmode " $value"
			}
		} elseif {$key == "desktop_name"} {
			set deskname $value
		} elseif {$key == "mixer_volume"} {
			zstatus::update_mixer
		} elseif { $key == "toggle_metar_window" } {
			metar::toggle_window
		} elseif { $key == "update_metar_report" } {
			metar::update
		} elseif {$key == "set_theme"} {
			if {$value != $currenttheme} {
				set_theme $value
				metar::set_theme $value
			}
		} elseif { $key == "musicpd_update" } {
			musicpd::update
		}
	}

	proc server_accept {channel} {
		chan configure $channel -buffering none -blocking 0
		chan event $channel readable [list zstatus::read_message $channel]
	}

	# Update the statusbar
	proc update {} {
		variable icons
		variable loadavg
		variable usedmem
		variable arcsize
		variable netin
		variable datetime
		variable mixer

		set loadavg "C: [sysinfo::getloadavg] "
		set memstats [sysinfo::getmemstats]
		set usedmem "M: [join [lindex $memstats 0]] "
		set swap [join [lindex $memstats 1]]
		if {[string length $swap]} {
			set usedmem "$usedmem\($swap\) "
		}

		set arcstats [sysinfo::getarcstats]
		set arcsize "ARC: [join [lindex $arcstats 0]] "

		set netstats [sysinfo::getnetstats em0]
		set netin "$icons(down)[join [lindex $netstats 0]] "

		set datetime [clock format [clock seconds] \
			-locale $::env(LANG) -format {%d %b %H:%M }]

		set mixer "$icons(mixer) [sysinfo::getmixervol]"

		devices::update
		maildir::update
		musicpd::update
	}

	# Setup the static items in the statusbar
	proc setup {} {
		variable barwidgets
		variable currenttheme
		variable themefile
		variable widgetarray
		variable wintitle

		frame .bar
		pack .bar -fill both -expand 1
		foreach item $barwidgets {
			array set widget $widgetarray($item)
			switch $widget(type) {
				label {
					pack [label .bar.$item -font $widget(font) \
						-text $widget(text)] -side $widget(side)
				}
				text {
					set wintitle [text .bar.$item -font $widget(font) \
						-height $widget(height) -borderwidth 0 \
						-highlightthickness 0 -wrap word]
					$wintitle tag configure emoji -font emoji
					pack $wintitle -side $widget(side) -expand 1
					$wintitle configure -state disabled
				}
				var {
					pack [label .bar.$item -font $widget(font) \
						-textvar $widget(text)] -side $widget(side)
				}
			}
			if [info exists widget(separator)] {
				pack [frame .bar.after_$item -width 1] \
					-fill y -padx 5 -side $widget(side)
			}
		}

		bind .bar.deskmode <MouseWheel> {
			if {%D < 0} {
				zstatus::wm_message "desktop-mode-next"
			} else {
				zstatus::wm_message "desktop-mode-prev"
			}
		}
		bind .bar.desklist <MouseWheel> {
			if {%D < 0} {
				zstatus::wm_message "desktop-switch-next"
			} else {
				zstatus::wm_message "desktop-switch-prev"
			}
		}
		bind .bar.loadavg <1> { exec xterm +sb -class top -e top & }
		bind .bar.mixer <MouseWheel> {
			if {%D < 0} {
				exec mixer vol=-0.05
			} else {
				exec mixer vol=+0.05
			}
			zstatus::update_mixer
		}
		bind .bar.metar <1> { metar::toggle_window }
		bind .bar.metar <2> { metar::update }

		devices::setup .bar after_netin left
		maildir::setup .bar after_metar right
		musicpd::setup .bar after_mixer right

		if {[file exists $themefile]} {
			set_theme [string trim [utils::read_file $themefile]]
		} else {
			set_theme light
		}
		metar::setup $currenttheme

		utils::every 2000 zstatus::update
	}
}

set lang fr
set timezone :America/Montreal

tk appname "zstatus"
font create normal -family NotoSans -size 11
font create italic -family NotoSans -size 11 -slant italic
font create bold -family NotoSans -size 11 -weight bold
font create emoji -family NotoColorEmoji -size 11

wm attributes . -topmost 1 -type dock
wm geometry . "[winfo vrootwidth .]x26+0+0"
wm title . "zstatus version 20250825"

zstatus::setup
set listen [unix_sockets::listen $zstatus::barsocket zstatus::server_accept]
vwait forever
