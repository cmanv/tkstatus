#!/usr/bin/env wish9.0
package require mime
package require utils

namespace eval maildir {
	variable accountlist [ list b2b2c gmail unix yahoo ]
	variable path "$::env(HOME)/.maildir"
	variable mailicon \ueec0
	variable activepopup 0

	namespace export setup update set_theme
}

proc maildir::dark {} {
	set theme [ list \
		background	{#3b4252} \
		mailinfo	WhiteSmoke \
		mailsep		OliveDrab \
		b2b2c		orange \
		gmail		SkyBlue2 \
		unix		tan \
		yahoo		PaleGreen3 ]
}

proc maildir::light {} {
	set theme [ list \
		background	gray90 \
		mailinfo	black \
		mailsep		black \
		b2b2c		chocolate \
		gmail		SteelBlue \
		unix		brown \
		yahoo		DarkGreen ]
}

# Setup the mailboxes
proc maildir::setup { widget position side } {
	variable accountlist
	variable path
	variable mailboxes
	variable mailframe
	variable mailsep
	variable mailpos
	variable mailside

	set mailframe $widget.mailboxes
	set mailsep $widget.mailsep
	set mailpos $widget.$position
	set mailside $side

	frame $mailframe
	frame $mailsep -width 1

	array set mailboxes {}
	foreach account $accountlist {
		array set mailbox {}
		set mailbox(path) "$path/$account/inbox/new"
		set mailbox(visible) 0
		set mailbox(newmail) 0
		set mailboxes($account) [array get mailbox]

		label $mailframe.$account -font normal -text ""
		bind $mailframe.$account <1>  "maildir::newmail $account"
		bind $mailframe.$account <2> {
			exec emacsclient -c -e -F "((width . 120) (height . 30))" \
				"(mu4e)" > /dev/null 2>@1 &
		}
	}
}

# Look for new messages in the mailboxes
proc maildir::update {} {
	variable accountlist
	variable mailboxes
	variable mailframe
	variable mailsep
	variable mailpos
	variable mailside
	variable mailicon

	foreach account $accountlist {
		array set mailbox $mailboxes($account)
		set newmail [llength [glob -nocomplain -dir "$mailbox(path)" *]]
		if {$newmail && $newmail != $mailbox(newmail)} {
			$mailframe.$account configure -text "$mailicon ($newmail)"
			set mailbox(newmail) $newmail
			if {!$mailbox(visible)} {
				if {![string length [pack slaves $mailframe]]} {
					pack $mailframe -after $mailpos \
						-side $mailside
					pack $mailsep -after $mailframe \
						-fill y -padx 5 -side $mailside
				}
				pack $mailframe.$account -side left
				set mailbox(visible) 1
			}
			set mailboxes($account) [array get mailbox]
		} else {
			if {!$newmail && $mailbox(visible)} {
				pack forget $mailframe.$account
				if {![string length [pack slaves $mailframe]]} {
					pack forget $mailframe $mailsep
				}
				set mailbox(newmail) 0
				set mailbox(visible) 0
				set mailboxes($account) [array get mailbox]
			}
		}
	}

}

proc maildir::set_theme { currenttheme } {
	variable accountlist
	variable mailframe
	variable mailsep
	variable them

	array set theme [$currenttheme]
	$mailframe configure -background $theme(background)
	$mailsep configure -background $theme(mailsep)
	foreach account $accountlist {
		$mailframe.$account configure -bg $theme(background) -fg $theme($account)
	}
}

proc maildir::convert_date { rfc822 } {
	set ctime [clock scan $rfc822]
	set date [clock format $ctime -format {%a %d %b %Y %T %Z} \
			-timezone $::timezone -locale $::lang]
	return $date
}

proc maildir::convert_header { header } {
	set tokens [regexp -linestop -all -inline {(.*)=\?([\w\-]+)\?(.)\?(.*?)\?\=(.*)} $header]
	if { $tokens == {} } {
		return $header
	}

	set result ""
	foreach { _ head charset enctype value tail } $tokens {
		if { [string is space $head] } {
			if { [string length $result] } {
				set head " "
			} else {
				set head ""
			}
		}
		if { [string is space $tail] } {
			set tail ""
		}
		set charset [string tolower $charset]
		if { [string match iso-* $charset] } {
			set charset [string replace $charset 0 3 iso]
		} elseif { [string match windows-* $charset] } {
			set charset [string replace $charset 0 7 cp]
		}
		set enctype [string tolower $enctype]
		if { $enctype == "b" } {
			set value [::base64::decode $value]
		} elseif { $enctype == "q" } {
			set value [::mime::qp_decode $value 1]
		}
		set value [encoding convertfrom $charset $value]
		set result "${result}${head}${value}${tail}"
	}

	return $result
}

# Popup after button event on mail icon
proc maildir::newmail { account } {
	variable theme
	variable mailboxes
	variable activepopup

	if {$activepopup} {
		destroy .mailpopup
		set activepopup 0
		return
	}
	set activepopup 1

	toplevel .mailpopup -background $theme(background) -class Newmail
	wm attributes .mailpopup -type dialog
	wm overrideredirect .mailpopup 1
	wm geometry .mailpopup -10+26

	pack [frame .mailpopup.$account -background $theme(background)] \
		-expand 1 -fill x -side top
	pack [label .mailpopup.$account.label -font bold -bg $theme(background) \
		-fg $theme($account) -text "-- $account --"] \
		-expand 1 -side left
	pack [frame .mailpopup.sep$account -background $theme(mailsep) \
		-height 1] -fill x -side top

	set count 0
	array set mailbox $mailboxes($account)
	foreach file [glob -nocomplain -dir "$mailbox(path)" *] {
		set tokens [mime::initialize -string [utils::read_file $file]]
		set date [convert_date [lindex [mime::getheader $tokens Date] 0]]
		set from [convert_header [lindex [mime::getheader $tokens From] 0]]
		set subject [convert_header [lindex [mime::getheader $tokens Subject] 0]]

		pack [frame .mailpopup.date$count -background $theme(background)] \
			-expand 1 -fill x
		pack [label .mailpopup.date$count.label -text $date \
			-font normal -bg $theme(background) -fg $theme(mailinfo)] \
			-side left -padx 5
		pack [frame .mailpopup.from$count -background $theme(background)] \
			-expand 1 -fill x
		pack [label .mailpopup.from$count.label -text $from \
			-font normal -bg $theme(background) -fg $theme(mailinfo)] \
			-side left -padx 5
		pack [frame .mailpopup.subject$count -background $theme(background)] \
			-expand 1 -fill x
		pack [label .mailpopup.subject$count.label -text $subject \
			-font normal -bg $theme(background) -fg $theme(mailinfo)] \
			-side left -padx 5

		pack [frame .mailpopup.sep$count -background $theme(mailsep) \
			-height 1] -side top -fill x
		incr count
	}
	wm title .mailpopup "$account - $count message(s) non lu(s)."
	bind .mailpopup <Button> {
		destroy .mailpopup
		set maildir::activepopup 0
	}
}

package provide maildir 0.1
