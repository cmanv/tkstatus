#!/usr/bin/env wish9.0
package require mime
package require utils

namespace eval mail {
	variable mailicon \ueec0
	variable activepopup 0
	namespace export setup update set_theme
}

proc mail::set_theme { newtheme } {
	variable mailframe
	variable mailsep

	variable statusbar
	variable separator
	variable mailboxes

	variable theme
	set theme $newtheme

	$mailframe configure -background $statusbar($theme)
	$mailsep configure -background $separator($theme)
	foreach index [array names mailboxes] {
		array set mailbox $mailboxes($index)
		$mailframe.$index configure -fg $mailbox($theme)\
			 -bg $statusbar($theme)
	}
}

# Look for new messages in the mailboxes
proc mail::update {} {
	variable mailframe
	variable mailsep
	variable mailpos
	variable mailside
	variable mailicon
	variable mailboxes

	foreach index [array names mailboxes] {
		array set mailbox $mailboxes($index)
		set newmail [llength [glob -nocomplain -dir "$mailbox(path)/new" *]]
		if {$newmail && $newmail != $mailbox(newmail)} {
			$mailframe.$index configure -text "$mailicon ($newmail)"
			set account(newmail) $newmail
			if {!$mailbox(visible)} {
				if {![string length [pack slaves $mailframe]]} {
					pack $mailframe -after $mailpos \
						-side $mailside
					pack $mailsep -after $mailframe \
						-fill y -padx 5 -side $mailside
				}
				pack $mailframe.$index -side left
				set mailbox(visible) 1
			}
			set mailboxes($index) [array get mailbox]
		} else {
			if {!$newmail && $mailbox(visible)} {
				pack forget $mailframe.$index
				if {![string length [pack slaves $mailframe]]} {
					pack forget $mailframe $mailsep
				}
				set mailbox(newmail) 0
				set mailbox(visible) 0
				set mailboxes($index) [array get mailbox]
			}
		}
	}
}

# Setup the mailboxes
proc mail::setup { base position side } {
	variable mail
	variable mailboxes
	variable statusbar
	variable separator

	array set mail $::widgetarray(mail)
	array set mailboxes $::config(mailboxes)
	array set statusbar $::widgetarray(statusbar)
	array set separator $::widgetarray(separator)

	variable mailframe
	variable mailsep
	variable mailpos
	variable mailside

	set mailframe $base.mailframe
	set mailsep $base.mailsep
	set mailpos $base.$position
	set mailside $side

	frame $mailframe
	frame $mailsep -width 1

	foreach index [array names mailboxes] {
		array set mailbox $mailboxes($index)
		set mailbox(visible) 0
		set mailbox(newmail) 0
		set mailboxes($index) [array get mailbox]

		label $mailframe.$index -font normal -text ""
		bind $mailframe.$index <Enter> "mail::new $index"
		bind $mailframe.$index <Leave> {
			destroy .mailpopup
			set mail::activepopup 0
		}
		bind $mailframe.$index <1> {
			exec emacsclient -c -e -F "((width . 120) (height . 30))" \
				"(mu4e)" > /dev/null 2>@1 &
		}
	}
}

proc mail::convert_date { rfc822 } {
	set ctime [clock scan $rfc822]
	set date [clock format $ctime -format {%a %d %b %Y %T %Z} \
			-timezone $::config(timezone) -locale $::config(lang)]
	return $date
}

proc mail::convert_header { header } {
	set tokens [regexp -linestop -all -inline {(.*)=\?([\w\-]+)\?(.)\?(.*?)\?\=(.*)} $header]
	if { $tokens == {} } {
		return $header
	}

	set result ""
	foreach { _ head charset enctype value tail } $tokens {
		if { [string is space $head] } {
			if { [string length $result] } {
				set head " "
			} else {
				set head ""
			}
		}
		if { [string is space $tail] } {
			set tail ""
		}
		set charset [string tolower $charset]
		if { [string match iso-* $charset] } {
			set charset [string replace $charset 0 3 iso]
		} elseif { [string match windows-* $charset] } {
			set charset [string replace $charset 0 7 cp]
		}
		set enctype [string tolower $enctype]
		if { $enctype == "b" } {
			set value [::base64::decode $value]
		} elseif { $enctype == "q" } {
			set value [::mime::qp_decode $value 1]
		}
		set value [encoding convertfrom $charset $value]
		set result "${result}${head}${value}${tail}"
	}

	return $result
}

# Popup after button event on mail icon
proc mail::new { index } {
	variable activepopup
	variable mail
	variable mailboxes
	variable statusbar
	variable separator
	variable theme

	if {$activepopup} {
		destroy .mailpopup
	} else {
		set activepopup 1
	}

	toplevel .mailpopup -background $statusbar($theme) -class Newmail
	wm attributes .mailpopup -type dialog
	wm overrideredirect .mailpopup 1
	wm geometry .mailpopup -10+27

	array set mailbox $mailboxes($index)
	pack [frame .mailpopup.$index -background $statusbar($theme)] \
		-expand 1 -fill x -side top
	pack [label .mailpopup.$index.label -font bold -bg $statusbar($theme) \
		-fg $mail($theme) -text "-- $mailbox(name) --"] \
		-expand 1 -side left
	pack [frame .mailpopup.sep$index -background $separator($theme) \
		-height 1] -fill x -side top

	set count 0
	foreach file [glob -nocomplain -dir "$mailbox(path)/new" *] {
		set mesg [utils::read_file $file]
		if {[string length $mesg] < 2} {
			continue
		}
		set tokens [mime::initialize -string $mesg]
		set date [convert_date [lindex [mime::getheader $tokens Date] 0]]
		set from [convert_header [lindex [mime::getheader $tokens From] 0]]
		set subject [convert_header [lindex [mime::getheader $tokens Subject] 0]]

		pack [frame .mailpopup.date$count -background $statusbar($theme)]\
			-expand 1 -fill x
		pack [label .mailpopup.date$count.label -text $date\
			-font $mail(font) -bg $statusbar($theme)\
			-fg $mail($theme)] -side left -padx 5
		pack [frame .mailpopup.from$count -background $statusbar($theme)]\
			-expand 1 -fill x
		pack [label .mailpopup.from$count.label -text $from\
			-font $mail(font) -bg $statusbar($theme)\
			-fg $mail($theme)] -side left -padx 5
		pack [frame .mailpopup.subject$count -background $statusbar($theme)]\
			-expand 1 -fill x

		set width [string length $subject]
		set height [tcl::mathfunc::ceil [expr $width / 72.0]]
		set width [tcl::mathfunc::min $width 72]

		set tsubject [text .mailpopup.subject$count.text -font $mail(font)\
			-wrap word  -borderwidth 0 -highlightthickness 0\
			-height $height -width $width -fg $mail($theme)\
			-bg $statusbar($theme)]

		pack $tsubject -side left -padx 5
		$tsubject tag configure emoji -font emoji
		$tsubject insert 1.0 $subject
		foreach i [$tsubject search -all -regexp {[\u2000-\u28ff\U1f000-\U1faff]} 1.0 end] {
			$tsubject tag add emoji $i
		}

		pack [frame .mailpopup.sep$count -background $separator($theme) \
			-height 1] -side top -fill x
		incr count
	}
}
package provide mail @PACKAGE_VERSION@
