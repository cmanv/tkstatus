#!/usr/bin/env wish9.0
package require zstatus::music::mpd

namespace eval zstatus::music {
	variable music_active 0
	variable tooltip_active 0

	array set icons { 0 \ueb92 1 \ueb78 2 \uef32 3 \uef82 }

	namespace export setup update set_theme show_tooltip hide_tooltip
}

# Set the theme for the devices
proc zstatus::music::set_theme { newtheme } {
	variable musicframe
	variable musicsep
	variable statusbar
	variable separator
	variable music
	variable theme

	if {$music(valid) == 0} { return }
	set theme $newtheme
	$musicframe configure -bg $statusbar($theme) -fg $music($theme)
	$musicsep configure -background $separator($theme)
}

# Show what is currently playing on MPD
proc zstatus::music::update {} {
	variable musicframe
	variable musicsep
	variable musicpos
	variable musicside
	variable music_active
	variable tooltip_active
	variable music
	variable icons

	if {$music(valid) == 0} { return }
	set state [mpd::state]
	if { $state == 2 || $state == 3 } {
		$musicframe configure -text $icons($state)
		if {!$music_active} {
			pack $musicframe -after $musicpos -side $musicside
			pack $musicsep -after $musicframe -fill y -padx 5 -side $musicside
			set music_active 1
		}

	} else {
		if {$music_active} {
			pack forget $musicframe $musicsep
			set music_active 0
		}
	}
	if { $music_active && $tooltip_active } {
		update_tooltip
	}
}

# Setup widget for MPD
proc zstatus::music::setup { widget position side } {
	variable musicframe
	variable musicsep
	variable musicpos
	variable musicside
	variable statusbar
	variable separator
	variable music

	array set music $::widgetarray(music)
	if {![info exists music(socket)] && [info exists ::env(MPD_HOST)]} {
		set music(socket) $::env(MPD_HOST)
	}

	array set statusbar $::widgetarray(statusbar)
	array set separator $::widgetarray(separator)

	set musicframe $widget.music
	set musicsep $widget.musicsep
	set musicpos $widget.$position
	set musicside $side

	label $musicframe -font $music(font)
	frame $musicsep -width 1

	bind $musicframe <Enter> { zstatus::music::show_tooltip }
	bind $musicframe <Leave> { zstatus::music::hide_tooltip }
	bind $musicframe <1> {
		if {![catch {exec mpc toggle}]} { zstatus::music::update }
	}
	bind $musicframe <2> {
		exec xterm +sb -class ncmpcpp -e ncmpcpp &
	}
	bind $musicframe <3> {
		if {![catch {exec mpc stop}]} { zstatus::music::update }
	}
	bind $musicframe <MouseWheel> {
		if {%D < 0} {
			if {![catch {exec mpc next}]} { zstatus::music::update_tooltip }
		} else {
			if {![catch {exec mpc prev}]} { zstatus::music::update_tooltip }
		}
	}

	set music(valid) 0
	if ![info exists music(socket)] { return }
	if [catch {mpd::connect $music(socket)} error] {
		puts stderr $error
	} else {
		set music(valid) 1
	}
}

# Show info on current track
proc zstatus::music::show_tooltip {} {
	variable tooltip_active
	variable mpdtext
	variable music
	variable statusbar
	variable theme

	set tooltip_active 1
	set tooltip [toplevel .musictooltip -background $statusbar($theme)]
	wm title $tooltip "Now Playing"
	wm attributes $tooltip -type dialog
	wm overrideredirect $tooltip 1
	set xpos [tcl::mathfunc::max [expr [winfo pointerx .] - 120] 1]
	wm geometry $tooltip +$xpos+27

	set mpdtext [text $tooltip.text -font $music(font) -height 2 \
			-borderwidth 1 -highlightthickness 0 ]
	pack $mpdtext -side left -padx 5 -pady 3
	update_tooltip
}

proc zstatus::music::hide_tooltip {} {
	variable tooltip_active

	set tooltip_active 0
	destroy .musictooltip
}

# Update info on current track
proc zstatus::music::update_tooltip { } {
	variable music
	variable mpdtext
	variable statusbar
	variable theme

	set mpdtitle [join [mpd::currenttitle]]

	set width 0
	foreach line [split $mpdtitle \n] {
		set width [tcl::mathfunc::max [string length $line] $width]
	}
	$mpdtext delete 1.0 end
	$mpdtext insert 1.0 $mpdtitle
	$mpdtext configure -width $width -fg $music($theme) -bg $statusbar($theme)
}

package provide @PACKAGE_NAME@ @PACKAGE_VERSION@
