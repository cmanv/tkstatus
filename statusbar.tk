#!/usr/bin/env wish8.6
package require mime
package require SysInfo
package require MPD

proc read_file { filename } {
	set file [open $filename r]
	set content [read $file]
	close $file
	return $content
}

proc convert_date { rfc822 } {
	set ctime [clock scan $rfc822]
	set date [clock format $ctime -format {%a %d %b %Y %T %Z} \
			-timezone :America/Montreal -locale fr]
	return $date
}

proc convert_header { header } {
	set tokens [regexp -linestop -all -inline {(.*)=\?([\w\-]+)\?(.)\?(.*?)\?\=(.*)} $header]
	if { $tokens == {} } {
		return $header
	}

	set result ""
	foreach { _ head charset enctype value tail } $tokens {
		set charset [string tolower $charset]
		if { [string match iso-* $charset] } {
			set charset [string replace $charset 3 3]
		}
		set enctype [string tolower $enctype]
		if { $enctype == "b" } {
			set value [::base64::decode $value]
		} elseif { $enctype == "q" } {
			set value [::mime::qp_decode $value 1]
		}

		set value [encoding convertfrom $charset $value]
		set result "${result}${head}${value}${tail}"
	}

	return $result
}

namespace eval theme {
	proc dark {} {
		set colortable [ list \
			acpitemp	PaleGreen3 \
			bar		{#3b4252} \
			b2b2c		orange \
			datetime	WhiteSmoke \
			desktop		PaleGreen3 \
			devices		SteelBlue2 \
			gmail		SkyBlue2 \
			loadavg		CadetBlue3 \
			mailinfo	WhiteSmoke \
			metar		Gold \
			mixer		CadetBlue3 \
			mode		CadetBlue3 \
			musicpd		CadetBlue3 \
			netin		Gold2 \
			netout		CadetBlue3 \
			separator	OliveDrab \
			unix		tan \
			usedmem		CadetBlue3 \
			windowname	PaleGreen3 \
			yahoo		PaleGreen3 ]
	}

	proc light {} {
		set colortable [ list \
			acpitemp	MediumBlue \
			bar		gray90 \
			b2b2c		brown \
			datetime	black \
			desktop		DarkBlue \
			devices		DarkGreen \
			gmail		SteelBlue \
			loadavg		black \
			mailinfo	black \
			metar		DarkGreen \
			mixer		black \
			mode		DarkBlue \
			musicpd		DarkBlue \
			netin		DarkGreen \
			netout		purple \
			separator	black \
			unix		black \
			usedmem		black \
			windowname	black \
			yahoo		DarkGreen ]
	}
}

namespace eval statusbar {
	variable xscreen 0
	variable wmport 9981
	variable mailpopup 0
	variable themefile "$::env(HOME)/.cache/theme/default"

	# Unicode icons from remixicon
	array set remix [ list	down 	\uea4a	up 	\uea74 \
				disk	\ueba9	printer	\uefd2 \
				sdcard	\uf066	udisk	\uf1cc \
				mail	\ueec0	mixer	\uf229 ]

	# List of fixed items in the bar
	set baritems [ list mode sep0 desktop sep1 loadavg usedmem acpitemp \
			netin netout sep2 windowname datetime \
			sep3 metar sep4 mixer sep5 ]

	# Array describing items in the bar
	array set widgetarray [ list \
		mode [ list type var side left text statusbar::mode font normal ] \
		sep0 [ list type vseparator side left ] \
		desktop [ list type var side left text statusbar::desktops font normal ] \
		sep1 [ list type vseparator side left ] \
		loadavg [ list type var side left text statusbar::loadavg font normal ] \
		usedmem [ list type var side left text statusbar::usedmem font normal ] \
		acpitemp [ list type var side left text statusbar::acpitemp font normal ] \
		netin [ list type var side left text statusbar::netin font normal ] \
		netout [ list type var side left text statusbar::netout font normal ] \
		sep2 [ list type vseparator side left ] \
		windowname [ list type xvar side left text statusbar::windowname font normal ] \
		datetime [ list type var side right text statusbar::datetime font normal ] \
		sep3 [ list type vseparator side right ] \
		metar [ list type var side right text statusbar::metar font normal ] \
		sep4 [ list type vseparator side right ] \
		mixer [ list type var side right text statusbar::mixer font normal ] \
		sep5 [ list type vseparator side right ] ]

	# Setup the fixed items in the bar
	proc setup_bar {} {
		variable baritems
		variable widgetarray

		frame .bar
		pack .bar -fill both -expand 1
		foreach item $baritems {
			array set widget $widgetarray($item)
			switch $widget(type) {
				label {
					pack [label .bar.$item -font $widget(font) \
						-text $widget(text)] -side $widget(side)
				}
				var {
					pack [label .bar.$item -font $widget(font) \
						-textvar $widget(text)] -side $widget(side)
				}
				xvar {
					pack [label .bar.$item -font $widget(font) \
						-textvar $widget(text)] -side $widget(side) \
						-expand 1
				}
				vseparator {
					pack [frame .bar.$item -width 1] -fill y -padx 5 \
						-side $widget(side)
				}
			}
		}

		bind .bar.desktop <4> { statusbar::prev_desktop }
		bind .bar.desktop <5> { statusbar::next_desktop }
		bind .bar.loadavg <1> { exec xterm +sb -class top -e top & }
		bind .bar.mixer <4> {
			exec mixer vol=+0.05
			statusbar::update_mixer
		}
		bind .bar.mixer <5> {
			exec mixer vol=-0.05
			statusbar::update_mixer
		}
		bind .bar.metar <1> { catch {exec metarcmd.tcl toggle_popup} }
		bind .bar.metar <2> { catch {exec metarcmd.tcl metar_update} }
	}

	# Setup the removable devices
	proc setup_devices {} {
		variable devicelist
		variable devicearray
		variable remix

		frame .bar.devices
		frame .bar.devicessep -width 1

		set devicelist [ list ada1 da0 da1 mmcsd0 ulpt0 ]
		set deviceicons [ list $remix(disk) $remix(udisk) $remix(udisk) \
				$remix(sdcard) $remix(printer) ]

		array set devicearray {}
		foreach devid $devicelist icon $deviceicons {
			array set device {}
			set device(path) "/dev/$devid"
			set device(visible) 0
			set devicearray($devid) [array get device]

			label .bar.devices.$devid
			.bar.devices.$devid configure -font normal -text "$icon $devid"
		}
	}

	# Check the presence of removable devices.
	proc update_devices {} {
		variable devicelist
		variable devicearray

		foreach devid $devicelist {
			array set device $devicearray($devid)
			if {[file exists $device(path)]} {
				if {!$device(visible)} {
					if {![string length [pack slaves .bar.devices]]} {
						pack .bar.devices -after .bar.sep2 -side left
						pack .bar.devicessep -after .bar.devices -fill y \
							-padx 5 -side left
					}
					pack .bar.devices.$devid -in .bar.devices -side left
					set device(visible) 1
					set devicearray($devid) [array get device]
				}
			} else {
				if {$device(visible)} {
					pack forget .bar.devices.$devid
					if {![string length [pack slaves .bar.devices]]} {
						pack forget .bar.devices .bar.devicessep
					}
					set device(visible) 0
					set devicearray($devid) [array get device]
				}
			}
		}

	}

	# Setup the mailboxes
	proc setup_mailboxes {} {
		variable accountlist
		variable mailboxes

		frame .bar.mailboxes
		frame .bar.mailsep -width 1

		set accountlist [ list unix b2b2c gmail yahoo ]
		set maildir "$::env(HOME)/.maildir"

		array set mailboxes {}
		foreach account $accountlist {
			array set mailbox {}
			set mailbox(path) "$maildir/$account/inbox/new"
			set mailbox(visible) 0
			set mailbox(newmail) 0
			set mailboxes($account) [array get mailbox]

			label .bar.mailboxes.$account -font normal -text ""
			bind .bar.mailboxes.$account <1>  "statusbar::newmailpopup $account"
			bind .bar.mailboxes.$account <2> {
				exec emacsclient -c -e -F "((width . 120) (height . 30))" \
					"(mu4e)" > /dev/null 2>@1 &
			}
		}
	}

	# Look for new messages in the mailboxes
	proc update_mailboxes {} {
		variable remix
		variable accountlist
		variable mailboxes

		foreach account $accountlist {
			array set mailbox $mailboxes($account)
			set newmail [llength [glob -nocomplain -dir "$mailbox(path)" *]]
			if {$newmail && $newmail != $mailbox(newmail)} {
				.bar.mailboxes.$account configure -text "$remix(mail) ($newmail)"
				set mailbox(newmail) $newmail
				if {!$mailbox(visible)} {
					if {![string length [pack slaves .bar.mailboxes]]} {
						pack .bar.mailboxes -after .bar.sep4 -side right
						pack .bar.mailsep -after .bar.mailboxes -fill y \
							-padx 5 -side right
					}
					pack .bar.mailboxes.$account -side left
					set mailbox(visible) 1
				}
				set mailboxes($account) [array get mailbox]
			} else {
				if {!$newmail && $mailbox(visible)} {
					pack forget .bar.mailboxes.$account
					if {![string length [pack slaves .bar.mailboxes]]} {
						pack forget .bar.mailboxes .bar.mailsep
					}
					set mailbox(newmail) 0
					set mailbox(visible) 0
					set mailboxes($account) [array get mailbox]
				}
			}
		}

	}

	# Popup after button event on mail icon
	proc newmailpopup { account } {
		variable currenttheme
		variable mailboxes
		variable mailpopup

		if {$mailpopup} {
			destroy .popup
			set mailpopup 0
			return
		}
		set mailpopup 1
		array set color [theme::$currenttheme]

		toplevel .popup -background $color(bar) -class Newmail
		wm attributes .popup -type dialog
		wm resizable .popup 0 0

		pack [frame .popup.$account -background $color(bar)] \
			-expand 1 -fill x -side top
		pack [label .popup.$account.label -font bold -bg $color(bar) \
			-fg $color($account) -text "-- $account --"] \
			-expand 1 -side left
		pack [frame .popup.sep$account -background $color(separator) \
			-height 1] -fill x -side top

		set count 0
		array set mailbox $mailboxes($account)
		foreach file [glob -nocomplain -dir "$mailbox(path)" *] {
			set tokens [mime::initialize -string [read_file $file]]
			set date [convert_date [lindex [mime::getheader $tokens Date] 0]]
			set from [convert_header [lindex [mime::getheader $tokens From] 0]]
			set subject [convert_header [lindex [mime::getheader $tokens Subject] 0]]

			pack [frame .popup.date$count -background $color(bar)] \
				-expand 1 -fill x
			pack [label .popup.date$count.label -text $date \
				-font normal -bg $color(bar) -fg $color(mailinfo)] \
				-side left -padx 5
			pack [frame .popup.from$count -background $color(bar)] \
				-expand 1 -fill x
			pack [label .popup.from$count.label -text $from \
				-font normal -bg $color(bar) -fg $color(mailinfo)] \
				-side left -padx 5
			pack [frame .popup.subject$count -background $color(bar)] \
				-expand 1 -fill x
			pack [label .popup.subject$count.label -text $subject \
				-font normal -bg $color(bar) -fg $color(mailinfo)] \
				-side left -padx 5

			pack [frame .popup.sep$count -background $color(separator) \
				-height 1] -side top -fill x
			incr count
		}
		wm title .popup "$account - $count message(s) non lu(s)."
		bind .popup <Button> {
			destroy .popup
			set statusbar::mailpopup 0
		}
		if {!$count} {
			destroy .popup
			set mailpopup 0
		}
	}

	# Setup widget for MPD
	proc setup_musicpd {} {
		variable musicpd_visible
		set musicpd_visible 0

		frame .bar.musicsep -width 1
		label .bar.musicpd -font italic -textvar statusbar::musicpd

		bind .bar.musicpd <1> {
			if {![catch {exec mpc toggle}]} { statusbar::update_musicpd }
		}
		bind .bar.musicpd <2> {
			exec xterm +sb -class ncmpcpp -e ncmpcpp &
		}
		bind .bar.musicpd <3> {
			if {![catch {exec mpc stop}]} { statusbar::update_musicpd }
		}
		bind .bar.musicpd <4> {
			if {![catch {exec mpc prev}]} { statusbar::update_musicpd }
		}
		bind .bar.musicpd <5> {
			if {![catch {exec mpc next}]} { statusbar::update_musicpd }
		}
	}

	# Show what is currently playing on MPD
	proc update_musicpd {} {
		variable musicpd
		variable musicpd_visible

		set title [join [mpd::currenttitle]]
		if {[string length $title]} {
			set musicpd $title
			if {!$musicpd_visible} {
				pack .bar.musicpd -after .bar.sep5 -side right
				pack .bar.musicsep -after .bar.musicpd -fill y -padx 5 -side right
				set musicpd_visible 1
			}

		} else {
			if {$musicpd_visible} {
				pack forget .bar.musicpd .bar.musicsep
				set musicpd_visible 0
				set musicpd ""
			}
		}
	}

	# Set the theme on the alements of the bar
	proc set_theme { theme } {
		variable currenttheme
		variable baritems
		variable widgetarray
		variable devicelist
		variable accountlist

		switch $theme {
			light {
				set currenttheme light
				array set color [theme::light]
			}
			dark {
				set currenttheme dark
				array set color [theme::dark]
			}
			default {
				return
			}
		}

		.bar configure -background $color(bar)
		foreach item $baritems {
			array set widget $widgetarray($item)
			switch $widget(type) {
				vseparator {
					.bar.$item configure -background $color(separator)
				}
				default {
					.bar.$item configure -bg $color(bar) -fg $color($item)
				}
			}
		}

		.bar.devices configure -background $color(bar)
		.bar.devicessep configure -background $color(separator)
		foreach device $devicelist {
			.bar.devices.$device configure -bg $color(bar) -fg $color(devices)
		}

		.bar.mailboxes configure -background $color(bar)
		.bar.mailsep configure -background $color(separator)
		foreach account $accountlist {
			.bar.mailboxes.$account configure -bg $color(bar) -fg $color($account)
		}

		.bar.musicpd configure -bg $color(bar) -fg $color(musicpd)
		.bar.musicsep configure -background $color(separator)
	}

	proc prev_desktop {} {
		variable xscreen
		variable wmport

		if {[catch {set channel [socket localhost $wmport]} ]} {
			puts stderr "Could not open socket on port $wmport!\n"
			return
		}
		puts $channel "$xscreen;PrevDesktop"
		close $channel
	}

	proc next_desktop {} {
		variable xscreen
		variable wmport

		if {[catch {set channel [socket localhost $wmport]} ]} {
			puts stderr "Could not open socket on port $wmport!\n"
			return
		}
		puts $channel "$xscreen;NextDesktop"
		close $channel
	}

	# Update mixer after button event
	proc update_mixer {} {
		variable mixer
		variable remix
		set mixer "$remix(mixer) [sysinfo::getmixervol]"
	}

	# Update some status bar items every 2 seconds
	proc status_update {} {
		variable remix
		variable loadavg
		variable usedmem
		variable acpitemp
		variable netin
		variable netout
		variable datetime
		variable mixer

		set loadavg "[sysinfo::getloadavg] "
		set usedmem "[join [sysinfo::getusedmemswap]] "
		set acpitemp "T [sysinfo::getacpitemp]"
		set netstats [sysinfo::getnetstats em0]
		set netin "$remix(down)[join [lindex $netstats 0]]"
		set netout "$remix(up)[join [lindex $netstats 1]]"

		set datetime [clock format [clock seconds] \
			-locale $::env(LANG) -format {%d %b %H:%M }]

		set mixer "$remix(mixer) [sysinfo::getmixervol]"

		update_devices
		update_mailboxes
		update_musicpd
	}

	proc read_socket {channel} {
		variable currenttheme
		variable desktops
		variable mode
		variable windowname
		variable metar

		if {[gets $channel line] < 0} {
			close $channel
			return
		}
		close $channel

		set line [string trimright $line]
		set equal [string first "=" $line]
		if {$equal == -1} {
			set key $line
			set value ""
		} elseif {$equal > 0} {
			set key [string range $line 0 $equal-1]
			set value [string range $line $equal+1 $equal+128]
		} else {
			return
		}
		if {$key == "window_active"} {
			set windowname $value
		}
		if {$key == "no_window_active"} {
			set windowname ""
		}
		if {$key == "desktop_list"} {
			set desktops $value
		}
		if {$key == "desktop_mode"} {
			set mode " $value"
		}
		if {$key == "mixer_volume"} {
			statusbar::update_mixer
		}
		if {$key == "metar_update"} {
			set metar $value
		}
		if {$key == "set_theme"} {
			if {$value != $currenttheme} {
				set_theme $value
			}
		}
	}

	proc server_accept {channel host port} {
		fconfigure $channel -buffering none -blocking 0
		fileevent $channel readable [list statusbar::read_socket $channel]
	}

	# Launch command periodically
	proc every {ms cmd} {
		eval $cmd
		after $ms [namespace code [info level 0]]
	}

	proc init {} {
		variable themefile

		setup_bar
		setup_devices
		setup_mailboxes
		setup_musicpd

		if {[file exists $themefile]} {
			set_theme [string trim [read_file $themefile]]
		} else {
			set theme "light"
		}
		mpd::connect $::env(MPD_HOST)

		every 2000 status_update
	}
}

tk appname "statusbar"
font create normal -family NotoSans -size 11
font create italic -family NotoSans -size 11 -slant italic
font create bold -family NotoSans -size 11 -weight bold

wm attributes . -topmost 1 -type dock
wm geometry . "[winfo vrootwidth .]x26+0+0"
wm title . "statusbar.tk version 20240815"

statusbar::init

socket -server statusbar::server_accept -myaddr localhost 9995
vwait forever
